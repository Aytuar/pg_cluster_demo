;; database name = connect string
;;
;; connect string params:
;;   dbname= host= port= user= password=
;;   client_encoding= datestyle= timezone=
;;   pool_size= connect_query=
[databases]

* = host=127.0.0.1 port=5432

;; Configuration section
[pgbouncer]

logfile = /var/log/postgresql/pgbouncer.log
pidfile = /var/run/postgresql/pgbouncer.pid

listen_addr = *
listen_port = 6432

; unix socket is also used for -R.
; On debian it should be /var/run/postgresql
;unix_socket_dir = /tmp
;unix_socket_mode = 0777
;unix_socket_group =
unix_socket_dir = /var/run/postgresql

; any, trust, plain, crypt, md5
auth_type = trust
auth_file = /etc/pgbouncer/userlist.txt

; comma-separated list of users, who are allowed to change settings
admin_users = postgres

;;;
;;; Pooler personality questions
;;;

; When server connection is released back to pool:
;   session      - after client disconnects
;   transaction  - after transaction finishes
;   statement    - after statement finishes
pool_mode = transaction

;
; Query for cleaning connection immediately after releasing from client.
; No need to put ROLLBACK here, pgbouncer does not reuse connections
; where transaction is left open.
;
; Query for 8.3+:
;   DISCARD ALL;
;
; Older versions:
;   RESET ALL; SET SESSION AUTHORIZATION DEFAULT
;
; Empty if transaction pooling is in use.
;
server_reset_query =

;
; Comma-separated list of parameters to ignore when given
; in startup packet.  Newer JDBC versions require the
; extra_float_digits here.
;
;ignore_startup_parameters = extra_float_digits

;
; When taking idle server into use, this query is ran first.
;   SELECT 1
;
server_check_query = select 1

; If server was used more recently that this many seconds ago,
; skip the check query.  Value 0 may or may not run in immediately.
;server_check_delay = 30

;;;
;;; Connection limits
;;;

; total number of clients that can connect
; Approximation: 500 instances * 12 connections/instance
max_client_conn = 100

; number of active connections from pgbouncer to postgresql per instance
; it means an application can have 3 active simultanous transactions
; Approximation: 500 instances * 6 connections/instance = 3000 maximum possible active connections to postgresql
; 6 = num of uwsgi workers - achive best parallism
; For details please visit: https://bugzilla.revelup.com/show_bug.cgi?id=24226
default_pool_size = 3

; always keep one connection ready per pool (rq scheduler periodic tasks)
; For details please visit: https://bugzilla.revelup.com/show_bug.cgi?id=24226
min_pool_size = 1

; how many additional connection to allow in case of trouble
reserve_pool_size = 1

; if a clients needs to wait more than this many seconds, use reserve pool
reserve_pool_timeout = 1

; log if client connects or server connection is made
log_connections = 1

; log if and why connection was closed
log_disconnections = 0

; log error messages pooler sends to clients
log_pooler_errors = 1

; If off, then server connections are reused in LIFO manner
;server_round_robin = 0

;;;
;;; Timeouts
;;;

;; Close server connection if its been connected longer.
server_lifetime = 1200

;; Close server connection if its not been used in this time.
;; Allows to clean unnecessary connections from pool after peak.
;; For details please visit: https://bugzilla.revelup.com/show_bug.cgi?id=24226
server_idle_timeout = 120

;; Cancel connection attempt if server does not answer takes longer.
server_connect_timeout = 5

client_connect_timeout = 30

;; If server login failed (server_connect_timeout or auth failure)
;; then wait this many second.
server_login_retry = 10

;

;;;
;;; Low-level tuning options
;;;

;; buffer for streaming packets
;pkt_buf = 2048

;; man 2 listen. default = 128.
;; 500 instances * 12 connections/instances
listen_backlog = 128